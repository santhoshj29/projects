package com.partpay.service;

import com.partpay.model.entity.*;
import com.partpay.repository.*;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class AuthService {
    
    private final UserRepository userRepository;
    private final OrganizationRepository organizationRepository;
    private final UserOrganizationRepository userOrganizationRepository;
    private final PartTimeEmployeeRepository partTimeEmployeeRepository;
    private final JwtService jwtService;
    private final BCryptPasswordEncoder passwordEncoder;
    private final OrgDatabaseService orgDatabaseService;
    
    @Transactional
    public Map<String, Object> signup(String name, String email, String password, String orgName) {
        Map<String, Object> response = new HashMap<>();
        
        // Check if email already exists
        if (userRepository.existsByEmail(email)) {
            throw new RuntimeException("Email is already registered");
        }
        
        // Check if organization name already exists
        if (organizationRepository.existsByName(orgName)) {
            throw new RuntimeException("An org is already registered with this name");
        }
        
        // Create user
        String hashedPassword = passwordEncoder.encode(password);
        User user = new User(name, email, hashedPassword);
        user = userRepository.save(user);
        
        // Create organization
        Organization organization = new Organization(orgName);
        organization = organizationRepository.save(organization);
        
        // Create user-org relationship with admin role
        UserOrganization userOrg = new UserOrganization(organization.getId(), user.getId(), "admin");
        userOrganizationRepository.save(userOrg);
        
        // Create organization-specific database tables
        orgDatabaseService.createOrgTables(organization.getId(), orgName);
        
        response.put("message", "User signed up successfully.");
        response.put("userId", user.getId());
        response.put("orgId", organization.getId());
        
        return response;
    }
    
    @Transactional(readOnly = true)
    public Map<String, Object> login(String email, String password, String orgName) {
        Map<String, Object> response = new HashMap<>();
        
        // Find user by email
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("User doesn't exist"));
        
        // Verify password
        if (!passwordEncoder.matches(password, user.getPassword())) {
            throw new RuntimeException("Wrong Password");
        }
        
        // Find organization
        Organization organization = organizationRepository.findByName(orgName)
                .orElseThrow(() -> new RuntimeException("Organization not found"));
        
        // Find user-org relationship
        UserOrganization userOrg = userOrganizationRepository
                .findByUserIdAndOrgId(user.getId(), organization.getId())
                .orElseThrow(() -> new RuntimeException("User is not associated with this organization."));
        
        // Get employee ID if role is ptemployee
        Long employeeId = null;
        if ("ptemployee".equals(userOrg.getRole())) {
            PartTimeEmployee employee = partTimeEmployeeRepository.findByUid(user.getId())
                    .orElse(null);
            if (employee != null) {
                employeeId = employee.getId();
            }
        }
        
        // Generate JWT token
        String token = jwtService.generateToken(
                user.getId(),
                organization.getId(),
                orgName,
                userOrg.getRole(),
                employeeId
        );
        
        response.put("auth", true);
        response.put("token", token);
        response.put("role", userOrg.getRole());
        response.put("employee_id", employeeId);
        response.put("org_id", organization.getId());
        response.put("message", "Login Successful");
        
        return response;
    }
}